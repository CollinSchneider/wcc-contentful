Run options: include {:bench=>true}

graphql querying
  with MemoryStore
                                          user     system      total        real
340 entries - 1000 iterations         1.380000   0.020000   1.400000 (  1.434584)
340 entries - 10000 iterations       12.320000   0.130000  12.450000 ( 12.494596)
340 entries - 100000 iterations     109.080000   0.860000 109.940000 (110.005653)
3400 entries - 1000 iterations        1.110000   0.020000   1.130000 (  1.123774)
3400 entries - 10000 iterations      10.820000   0.080000  10.900000 ( 10.914655)
3400 entries - 100000 iterations    108.440000   0.810000 109.250000 (109.307967)
34000 entries - 1000 iterations       1.280000   0.010000   1.290000 (  1.292590)
34000 entries - 10000 iterations     11.160000   0.060000  11.220000 ( 11.221283)
34000 entries - 100000 iterations   111.660000   0.520000 112.180000 (112.291016)
>avg:                                 0.001166   0.000011   0.001177 (  0.001181)
    bench find by id
                                          user     system      total        real
340 entries - 1000 iterations         2.300000   0.020000   2.320000 (  2.321619)
340 entries - 10000 iterations       22.830000   0.080000  22.910000 ( 22.923739)
340 entries - 100000 iterations     288.080000   2.030000 290.110000 (291.800340)
3400 entries - 1000 iterations        6.010000   0.050000   6.060000 (  6.055569)
3400 entries - 10000 iterations      88.540000   0.560000  89.100000 ( 89.507202)
3400 entries - 100000 iterations    480.000000   2.570000 482.570000 (482.946437)
34000 entries - 1000 iterations      43.810000   0.150000  43.960000 ( 43.985104)
34000 entries - 10000 iterations    428.880000   0.910000 429.790000 (429.922805)
>avg:                                 0.014228   0.000053   0.014281 (  0.014293)
    bench Homepage expand 15 links
                                          user     system      total        real
340 entries - 1000 iterations         2.730000   0.060000   2.790000 (  2.790680)
340 entries - 10000 iterations       24.560000   0.290000  24.850000 ( 24.863913)
340 entries - 100000 iterations     240.520000   2.620000 243.140000 (243.264612)
3400 entries - 1000 iterations       17.830000   0.130000  17.960000 ( 17.958770)
3400 entries - 10000 iterations     176.650000   1.290000 177.940000 (177.989738)
34000 entries - 1000 iterations     181.480000   1.030000 182.510000 (182.566034)
>avg:                                 0.037428   0.000234   0.037662 (  0.037672)
    bench find with filter (find_by equivalend)

WCC::Contentful::Model
  with memory store
                                          user     system      total        real
340 entries - 1000 iterations         0.100000   0.000000   0.100000 (  0.099376)
340 entries - 10000 iterations        0.780000   0.010000   0.790000 (  0.791788)
340 entries - 100000 iterations       7.190000   0.020000   7.210000 (  7.210082)
3400 entries - 1000 iterations        0.080000   0.000000   0.080000 (  0.081900)
3400 entries - 10000 iterations       0.730000   0.000000   0.730000 (  0.734989)
3400 entries - 100000 iterations      7.470000   0.030000   7.500000 (  7.500881)
34000 entries - 1000 iterations       0.070000   0.000000   0.070000 (  0.073187)
34000 entries - 10000 iterations      0.730000   0.010000   0.740000 (  0.734335)
34000 entries - 100000 iterations     7.560000   0.030000   7.590000 (  7.606518)
>avg:                                 0.000077   0.000000   0.000078 (  0.000078)
    bench Model.find by id
                                          user     system      total        real
340 entries - 1000 iterations         0.070000   0.010000   0.080000 (  0.073795)
340 entries - 10000 iterations        0.610000   0.000000   0.610000 (  0.614454)
340 entries - 100000 iterations       6.100000   0.020000   6.120000 (  6.128900)
3400 entries - 1000 iterations        0.070000   0.000000   0.070000 (  0.067165)
3400 entries - 10000 iterations       0.630000   0.000000   0.630000 (  0.639559)
3400 entries - 100000 iterations      6.190000   0.030000   6.220000 (  6.219021)
34000 entries - 1000 iterations       0.090000   0.000000   0.090000 (  0.084243)
34000 entries - 10000 iterations      0.620000   0.000000   0.620000 (  0.621842)
34000 entries - 100000 iterations     6.480000   0.030000   6.510000 (  6.511808)
>avg:                                 0.000067   0.000001   0.000068 (  0.000067)
    bench Homepage.find by id
                                          user     system      total        real
340 entries - 1000 iterations         1.290000   0.010000   1.300000 (  1.299413)
340 entries - 10000 iterations       12.480000   0.040000  12.520000 ( 12.528651)
340 entries - 100000 iterations     124.480000   0.480000 124.960000 (124.998872)
3400 entries - 1000 iterations        1.300000   0.000000   1.300000 (  1.308690)
3400 entries - 10000 iterations      12.700000   0.040000  12.740000 ( 12.739461)
3400 entries - 100000 iterations    126.860000   0.400000 127.260000 (127.286595)
34000 entries - 1000 iterations       1.270000   0.000000   1.270000 (  1.274270)
34000 entries - 10000 iterations     12.490000   0.070000  12.560000 ( 12.563364)
34000 entries - 100000 iterations   124.830000   0.620000 125.450000 (125.539170)
>avg:                                 0.001265   0.000004   0.001270 (  0.001272)
    bench Homepage expand 15 links
                                          user     system      total        real
340 entries - 1000 iterations         1.110000   0.010000   1.120000 (  1.126315)
340 entries - 10000 iterations       11.200000   0.150000  11.350000 ( 11.353572)
340 entries - 100000 iterations     107.700000   0.850000 108.550000 (108.583106)
3400 entries - 1000 iterations       12.490000   0.060000  12.550000 ( 12.557757)
3400 entries - 10000 iterations     122.900000   0.650000 123.550000 (123.595873)
34000 entries - 1000 iterations     143.590000   0.500000 144.090000 (144.128194)
>avg:                                 0.028613   0.000110   0.028723 (  0.028732)
    bench find_by (filter)

Finished in 54 minutes 33 seconds (files took 0.90067 seconds to load)
7 examples, 0 failures

